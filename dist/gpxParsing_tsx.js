"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkgpxnav"] = self["webpackChunkgpxnav"] || []).push([["gpxParsing_tsx"],{

/***/ "./gpxParsing.tsx":
/*!************************!*\
  !*** ./gpxParsing.tsx ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ parseGpxFile)\n/* harmony export */ });\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpxparser */ \"../node_modules/gpxparser/dist/GPXParser.min.js\");\n/* harmony import */ var gpxparser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gpxparser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _turf_turf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/turf */ \"../node_modules/@turf/turf/dist/es/index.js\");\n/* harmony import */ var _mapTools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mapTools */ \"./mapTools.ts\");\n\n\n\nfunction smoothPoints(originalPoints, percentileCutoff) {\n    // Collect the distance from each point to the next point\n    // length = originalPoints.length - 1\n    const pairDistances = [];\n    for (let i = 0; i < originalPoints.length - 1; i++) {\n        pairDistances.push(_turf_turf__WEBPACK_IMPORTED_MODULE_1__.distance((0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(originalPoints[i]), (0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(originalPoints[i + 1])));\n    }\n    pairDistances.sort();\n    // Compute distance cutoff by multiplying the median distance by the given percentile\n    // of course it's not really a \"percentile\" anymore, but good enough\n    const distanceCutoff = percentileCutoff * pairDistances[Math.floor(pairDistances.length / 2)];\n    console.log('Distance cutoff is', distanceCutoff, 'km');\n    // For smoothness, massage the gpx route by merging points below distance cutoff\n    // the assumption here is that points are evenly spaced in time (maybe not always true?)\n    const smoothedPoints = [originalPoints[0]];\n    let idx = 1;\n    while (idx < originalPoints.length - 1) {\n        let summedDistance = 0;\n        while (summedDistance < distanceCutoff && idx < originalPoints.length - 1) {\n            summedDistance += _turf_turf__WEBPACK_IMPORTED_MODULE_1__.distance((0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(originalPoints[idx]), (0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(originalPoints[idx + 1]));\n            idx += 1;\n        }\n        smoothedPoints.push(originalPoints[idx]);\n        idx += 1;\n    }\n    // We remember to add on the last point\n    smoothedPoints.push(originalPoints[originalPoints.length - 1]);\n    console.log(`After smoothing: ${originalPoints.length} -> ${smoothedPoints.length}`);\n    return smoothedPoints;\n}\nfunction parseGpxFile(gpxContents, smoothingFactor = 0.3, joinTracks = false) {\n    const gpx = new (gpxparser__WEBPACK_IMPORTED_MODULE_0___default())();\n    gpx.parse(gpxContents);\n    const originalPoints = joinTracks\n        ? gpx.tracks.flatMap((track) => track.points)\n        : gpx.tracks[0].points;\n    const name = joinTracks\n        ? gpx.tracks.map((t) => t.name).join(', ')\n        : gpx.tracks[0].name;\n    let points = smoothingFactor != null\n        ? smoothPoints(originalPoints, smoothingFactor)\n        : originalPoints;\n    const distance = {\n        total: points\n            .slice(1)\n            .reduce((acc, cur, idx) => acc + _turf_turf__WEBPACK_IMPORTED_MODULE_1__.distance((0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(cur), (0,_mapTools__WEBPACK_IMPORTED_MODULE_2__.toGeoJson)(points[idx])), 0),\n    };\n    // If any point does not have ele key, then add ele: 0\n    for (const point of points) {\n        if (point.ele == null) {\n            point.ele = 0;\n        }\n    }\n    return {\n        distance,\n        points,\n        name,\n        sizeBytes: gpxContents.length,\n    };\n}\n\n\n//# sourceURL=webpack://gpxnav/./gpxParsing.tsx?");

/***/ }),

/***/ "./mapTools.ts":
/*!*********************!*\
  !*** ./mapTools.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"bearingDiff\": () => (/* binding */ bearingDiff),\n/* harmony export */   \"clamp\": () => (/* binding */ clamp),\n/* harmony export */   \"fixBearingDomain\": () => (/* binding */ fixBearingDomain),\n/* harmony export */   \"toGeoJson\": () => (/* binding */ toGeoJson)\n/* harmony export */ });\nfunction toGeoJson(point) {\n    return [point.lon, point.lat, point.ele];\n}\nconst clamp = (num, lo, hi) => num < lo ? lo : num > hi ? hi : num;\n// Given bearings a and b in the range [-180, 180], return the short angle that moves a to b.\n// examples:\n// if a is 10 and b is -10, then the answer is -20.\n// if a is -10 and b is 10, then the answer is 20.\n// if a is -170 and b is 170, then the answer is -20.\n// if a is 170 and b is -170, then the answer is 20.\nconst bearingDiff = (a, b) => {\n    // diff will be in the range [0, 360]\n    const diff = Math.abs(b - a);\n    const sign = b > a ? 1 : -1;\n    return sign * (diff > 180 ? -(360 - diff) : diff);\n};\n// Fix a bearing between [-360, 360] to [-180, 180]\nconst fixBearingDomain = (b) => {\n    if (b < -180) {\n        return 360 + b;\n    }\n    else if (b > 180) {\n        return -360 + b;\n    }\n    return b;\n};\n\n\n//# sourceURL=webpack://gpxnav/./mapTools.ts?");

/***/ })

}]);